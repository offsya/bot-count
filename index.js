require('shelljs/global');
var version = exec('node --version', {silent:true}).output;

const TelegramApi = require('node-telegram-bot-api')

const {sell, ddote} = require('./options')

const db = require('./bd.json');
const fs = require('fs');
const {parse} = require("nodemon/lib/cli");

const token = '791193985:AAF9XA3xDRDc0Ea80_RJupvJEvlacBsXLeY'

const bot = new TelegramApi(token, {polling: false})

const chats = {}
var file = JSON.parse(fs.readFileSync('./bd.json', 'utf-8'))

var dt, nums;
var x, buf;

function git(){
    exec("git add .", function(status, output) {
        exec("git commit -m 'bot-count'", function(status, output) {
            exec("git push origin master", function(status, output) {
                console.log('konsos')
            });
        });
    });
}

const brusko = {
    reply_markup: JSON.stringify({
        inline_keyboard: [
            [{text: '–¢—Ä–æ–ø–∏—á–µ—Å–∫–∏–π –∫–æ–∫—Ç–µ–π–ª—å', callback_data: '–¢—Ä–æ–ø–∏—á–µ—Å–∫–∏–π –∫–æ–∫—Ç–µ–π–ª—å'}],
            [{text: '–ì—Ä–∞–Ω–∞—Ç–æ–≤—ã–π —Å–æ–∫', callback_data: '–ì—Ä–∞–Ω–∞—Ç–æ–≤—ã–π —Å–æ–∫'}],
            [{text: '–≠–Ω–µ—Ä–≥–µ—Ç–∏–∫ —Å —è–±–ª–æ–∫–æ–º –∏ –∫–∏–≤–∏', callback_data: '–≠–Ω–µ—Ä–≥–µ—Ç–∏–∫ —Å —è–±–ª–æ–∫–æ–º –∏ –∫–∏–≤–∏'}],
            [{text: '–≠–Ω–µ—Ä–≥–µ—Ç–∏–∫ —Å –º–∞–Ω–≥–æ', callback_data: '–≠–Ω–µ—Ä–≥–µ—Ç–∏–∫ —Å –º–∞–Ω–≥–æ'}],
            [{text: '–≠–Ω–µ—Ä–≥–µ—Ç–∏–∫ —Å –≤–∏—à–Ω–µ–π', callback_data: '–≠–Ω–µ—Ä–≥–µ—Ç–∏–∫ —Å –≤–∏—à–Ω–µ–π'}],
            [{text: '–§—Ä—É–∫—Ç–æ–≤–æ–µ –¥—Ä–∞–∂–µ(—Å–∫–∏—Ç–ª—Å)', callback_data: '–§—Ä—É–∫—Ç–æ–≤–æ–µ –¥—Ä–∞–∂–µ(—Å–∫–∏—Ç–ª—Å)'}],
            [{text: '–¢–∞—Ä—Ö—É–Ω', callback_data: '–¢–∞—Ä—Ö—É–Ω'}],
            [{text: '–§—Ä—É–∫—Ç–æ–≤—ã–π –º—É—Å—Å', callback_data: '–§—Ä—É–∫—Ç–æ–≤—ã–π –º—É—Å—Å'}],
        ]
    })
}
const mad = {
    reply_markup: JSON.stringify({
        inline_keyboard: [
            [{text: 'Ice Lychee', callback_data: 'Ice Lychee'}],
            [{text: 'Mix Tropic', callback_data: 'Mix Tropic'}],
            [{text: 'Apple Passion Fruit', callback_data: 'Apple Passion Fruit'}],
            [{text: 'Mix Wild Berries Red Bull', callback_data: 'Mix Wild Berries Red Bull'}],
            [{text: 'Lime Bubble Gum', callback_data: 'Lime Bubble Gum'}],
        ]
    })
}
const redneck = {
    reply_markup: JSON.stringify({
        inline_keyboard: [
            [{text: 'Rought Wine', callback_data: 'Rought Wine'}],
            [{text: 'Drunk Harvest', callback_data: 'Drunk Harvest'}],
            [{text: 'Fresh Truck', callback_data: 'Fresh Truck'}],
        ]
    })
}
const menu = {
    reply_markup: JSON.stringify({
        keyboard:[
            [{text: 'Brusko', callback_data: '/brusko'}, {text: 'MAD', callback_data: '/mad'}, {text: 'RedNeck', callback_data: '/redneck'}],
            [{text: 'Info', callback_data: '/info'}],
        ]
    })
}
const stats = {
    reply_markup: JSON.stringify({
        keyboard:[
            [{text: '–û–±—â–∞–≥ü§ë', callback_data: '/money'}],
            [{text: '–†–∞—Å—Å—ã–ª–∫–∞', callback_data: '/have'}],
            [{text: '–í—ã—Ö–æ–¥üôà', callback_data: '/exit'}],
        ]
    })
}

const br = {
    "–§—Ä—É–∫—Ç–æ–≤—ã–π –º—É—Å—Å": file.all["–§—Ä—É–∫—Ç–æ–≤—ã–π –º—É—Å—Å"],
    "–¢–∞—Ä—Ö—É–Ω": file.all["–¢–∞—Ä—Ö—É–Ω"],
    "–ì—Ä–∞–Ω–∞—Ç–æ–≤—ã–π —Å–æ–∫": file.all["–ì—Ä–∞–Ω–∞—Ç–æ–≤—ã–π —Å–æ–∫"],
    "–¢—Ä–æ–ø–∏—á–µ—Å–∫–∏–π –∫–æ–∫—Ç–µ–π–ª—å": db.all["–¢—Ä–æ–ø–∏—á–µ—Å–∫–∏–π –∫–æ–∫—Ç–µ–π–ª—å"],
    '–≠–Ω–µ—Ä–≥–µ—Ç–∏–∫ —Å —è–±–ª–æ–∫–æ–º –∏ –∫–∏–≤–∏': db.all["–≠–Ω–µ—Ä–≥–µ—Ç–∏–∫ —Å —è–±–ª–æ–∫–æ–º –∏ –∫–∏–≤–∏"],
    "–≠–Ω–µ—Ä–≥–µ—Ç–∏–∫ —Å –º–∞–Ω–≥–æ": db.all["–≠–Ω–µ—Ä–≥–µ—Ç–∏–∫ —Å –º–∞–Ω–≥–æ"],
    "–≠–Ω–µ—Ä–≥–µ—Ç–∏–∫ —Å –≤–∏—à–Ω–µ–π": db.all["–≠–Ω–µ—Ä–≥–µ—Ç–∏–∫ —Å –≤–∏—à–Ω–µ–π"],
    "–§—Ä—É–∫—Ç–æ–≤–æ–µ –¥—Ä–∞–∂–µ(—Å–∫–∏—Ç–ª—Å)": db.all["–§—Ä—É–∫—Ç–æ–≤–æ–µ –¥—Ä–∞–∂–µ(—Å–∫–∏—Ç–ª—Å)"],
    "Ice Lychee": db.all["Ice Lychee"],
    "Mix Tropic": db.all["Mix Tropic"],
    "Apple Passion Fruit": db.all["Apple Passion Fruit"],
    "Mix Wild Berries Red Bull": db.all["Mix Wild Berries Red Bull"],
    "Lime Bubble Gum": db.all["Lime Bubble Gum"],
    "Rought Wine": db.all["Rought Wine"],
    "Drunk Harvest": db.all["Drunk Harvest"],
    "Fresh Truck": db.all["Fresh Truck"],
    "Count": db.all.Count
}

function count(data, id){
    br[id] = br[id] - data;
    if (br[id] < 0){
        br[id] = 0;
    }
    file.all[id] = br[id]
    fs.writeFileSync('./bd.json', JSON.stringify(file, null, 2));

    if (br[id] == 0){
        return "0. –¢–æ–≤–∞—Ä –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø—Ä–æ–¥–∞–Ω"
    }
    return br[id];
}

const start = () => {
    bot.setMyCommands([
        {command: '/start', description: '–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ'},
        {command: '/info', description: '–ò–Ω—Ñ–∞'}
    ])

    bot.on('message', async msg => {
        const text = msg.text;
        const chatId = msg.chat.id;
        // console.log(msg)
        if (text === '/start'){
            await bot.sendSticker(chatId, 'https://tlgrm.ru/_/stickers/833/3af/8333afc9-e992-42b3-a63b-24a257a17608/1.webp')
            return bot.sendMessage(chatId, msg.from.first_name + ", hello", menu);
        }
        if(text === 'Info' || text === '/info'){
            return bot.sendMessage(chatId, "–ß—ë —Ö–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å?", stats);
        }
        if (text === 'Brusko'){
            buf = text;
            const brusko = {
                reply_markup: JSON.stringify({
                    inline_keyboard: [
                        [{text: '–¢–∞—Ä—Ö—É–Ω ' + file.all["–¢–∞—Ä—Ö—É–Ω"], callback_data: '–¢–∞—Ä—Ö—É–Ω'}],
                        [{text: '–§—Ä—É–∫—Ç–æ–≤—ã–π –º—É—Å—Å ' + file.all["–§—Ä—É–∫—Ç–æ–≤—ã–π –º—É—Å—Å"], callback_data: '–§—Ä—É–∫—Ç–æ–≤—ã–π –º—É—Å—Å'}],
                        [{text: '–¢—Ä–æ–ø–∏—á–µ—Å–∫–∏–π –∫–æ–∫—Ç–µ–π–ª—å ' + file.all["–¢—Ä–æ–ø–∏—á–µ—Å–∫–∏–π –∫–æ–∫—Ç–µ–π–ª—å"], callback_data: '–¢—Ä–æ–ø–∏—á–µ—Å–∫–∏–π –∫–æ–∫—Ç–µ–π–ª—å'}],
                        [{text: '–ì—Ä–∞–Ω–∞—Ç–æ–≤—ã–π —Å–æ–∫ ' + file.all['–ì—Ä–∞–Ω–∞—Ç–æ–≤—ã–π —Å–æ–∫'], callback_data: '–ì—Ä–∞–Ω–∞—Ç–æ–≤—ã–π —Å–æ–∫'}],
                        [{text: '–≠–Ω–µ—Ä–≥–µ—Ç–∏–∫ —Å —è–±–ª–æ–∫–æ–º –∏ –∫–∏–≤–∏ ' + file.all['–≠–Ω–µ—Ä–≥–µ—Ç–∏–∫ —Å —è–±–ª–æ–∫–æ–º –∏ –∫–∏–≤–∏'], callback_data: '–≠–Ω–µ—Ä–≥–µ—Ç–∏–∫ —Å —è–±–ª–æ–∫–æ–º –∏ –∫–∏–≤–∏'}],
                        [{text: '–≠–Ω–µ—Ä–≥–µ—Ç–∏–∫ —Å –º–∞–Ω–≥–æ ' + file.all['–≠–Ω–µ—Ä–≥–µ—Ç–∏–∫ —Å –º–∞–Ω–≥–æ'], callback_data: '–≠–Ω–µ—Ä–≥–µ—Ç–∏–∫ —Å –º–∞–Ω–≥–æ'}],
                        [{text: '–≠–Ω–µ—Ä–≥–µ—Ç–∏–∫ —Å –≤–∏—à–Ω–µ–π ' + file.all['–≠–Ω–µ—Ä–≥–µ—Ç–∏–∫ —Å –≤–∏—à–Ω–µ–π'], callback_data: '–≠–Ω–µ—Ä–≥–µ—Ç–∏–∫ —Å –≤–∏—à–Ω–µ–π'}],
                        [{text: '–§—Ä—É–∫—Ç–æ–≤–æ–µ –¥—Ä–∞–∂–µ(—Å–∫–∏—Ç–ª—Å) ' + file.all['–§—Ä—É–∫—Ç–æ–≤–æ–µ –¥—Ä–∞–∂–µ(—Å–∫–∏—Ç–ª—Å)'], callback_data: '–§—Ä—É–∫—Ç–æ–≤–æ–µ –¥—Ä–∞–∂–µ(—Å–∫–∏—Ç–ª—Å)'}],
                    ]
                })
            }

            return bot.sendMessage(chatId, 'Brusko (30ml SALT HARD):', brusko)


        }
        if (text === 'MAD'){
            buf = text;
            const mad = {
                reply_markup: JSON.stringify({
                    inline_keyboard: [
                        [{text: 'Ice Lychee ' + file.all['Ice Lychee'], callback_data: 'Ice Lychee'}],
                        [{text: 'Mix Tropic ' + file.all['Mix Tropic'], callback_data: 'Mix Tropic'}],
                        [{text: 'Apple Passion Fruit ' + file.all['Apple Passion Fruit'], callback_data: 'Apple Passion Fruit'}],
                        [{text: 'Mix Wild Berries Red Bull '  + file.all['Mix Wild Berries Red Bull'], callback_data: 'Mix Wild Berries Red Bull'}],
                        [{text: 'Lime Bubble Gum ' + file.all['Lime Bubble Gum'], callback_data: 'Lime Bubble Gum'}],
                    ]
                })
            }
            return bot.sendMessage(chatId, 'MAD (30ml SALT HARD):', mad)
        }
        if (text === 'RedNeck'){
            buf = text;
            const redneck = {
                reply_markup: JSON.stringify({
                    inline_keyboard: [
                        [{text: 'Rought Wine ' + file.all['Rought Wine'], callback_data: 'Rought Wine'}],
                        [{text: 'Drunk Harvest ' + file.all['Drunk Harvest'], callback_data: 'Drunk Harvest'}],
                        [{text: 'Fresh Truck ' + file.all['Fresh Truck'], callback_data: 'Fresh Truck'}],
                    ]
                })
            }
            return bot.sendMessage(chatId, 'RedNeck (30ml SALT) - Premium:', redneck)
        }
        if (text === '1' || text === '2' || text === '3' || text === '4' || text === '5' || text === '6' || text === '0'){
            var faketext = text;
            if(parseInt(faketext) > file.all[dt]){
                faketext = file.all[dt];
                bot.sendMessage(chatId, '–¢—ã –≤—ã–±—Ä–∞–ª '+ text +'. –î–∞–Ω–Ω–æ–≥–æ –≤–∫—É—Å–∞ –≤—Å–µ–≥–æ ' + file.all[dt] + ' –±–∞–Ω–æ–∫, —è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –ø–æ–¥—Å—Ç–∞–≤–∏–ª '+ file.all[dt]);
            }
            x = count(text, dt);
            nums = faketext;
            if(text === '0'){
                return bot.sendMessage(chatId, '–•—É—ë–≤–æü§¨', menu)
            }
            return bot.sendMessage(chatId, '–ó–∞ —Å–∫–æ–ª—å–∫–æ –ø—Ä–æ–¥–∞–ª?üòÅ', ddote)
        }
        if (text === '13' || text === '14' || text === '15' || text === '16' || text === '17' || text === '18'){
            file.Count += parseInt(nums) * parseInt(text)
            fs.writeFileSync('./bd.json', JSON.stringify(file, null, 2));
            git();
            return bot.sendMessage(chatId, '–†–∞–±–æ—Ç–∞–π –ª—É—á—à–µ, —â–µ–≥–æ–ª. –¢–∞–∫–∏—Ö –≤–∫—É—Å–æ–≤ –æ—Å—Ç–∞–ª–æ—Å—å –ø—Ä–æ–¥–∞—Ç—å ' + x + 'üòé', menu)

        }
        if (text === '–û–±—â–∞–≥ü§ë'){
            return bot.sendMessage(chatId, '–í –æ–±—â–∞–≥–µ ' + file.Count + '$')
        }
        if (text === "–†–∞—Å—Å—ã–ª–∫–∞"){
                bot.sendMessage(chatId, `Brusko (30ml SALT HARD):
    - –§—Ä—É–∫—Ç–æ–≤—ã–π –º—É—Å—Å
    - –ì—Ä–∞–Ω–∞—Ç–æ–≤—ã–π —Å–æ–∫
    - –¢–∞—Ä—Ö—É–Ω
    - –¢—Ä–æ–ø–∏—á–µ—Å–∫–∏–π –∫–æ–∫—Ç–µ–π–ª—å
    - –≠–Ω–µ—Ä–≥–µ—Ç–∏–∫ —Å —è–±–ª–æ–∫–æ–º –∏ –∫–∏–≤–∏
    - –≠–Ω–µ—Ä–≥–µ—Ç–∏–∫ —Å –º–∞–Ω–≥–æ
    - –≠–Ω–µ—Ä–≥–µ—Ç–∏–∫ —Å –≤–∏—à–Ω–µ–π
    - –§—Ä—É–∫—Ç–æ–≤–æ–µ –¥—Ä–∞–∂–µ(—Å–∫–∏—Ç–ª—Å)
    
MAD (30ml SALT HARD):
    - Ice Lychee
    - Mix Tropic
    - Apple Passion Fruit
    - Mix Wild Berries Red Bull
    - Lime Bubble Gum
    
RedNeck (30ml SALT) - Premium
    - Rought Wine ULTRA(–õ–∏–º–æ–Ω–∞–¥ —Å –≤–∏–Ω–æ–≥—Ä–∞–¥–æ–º, —Ö–æ–ª–æ–¥–æ–∫)
    - Drunk Harvest ULTRA(–õ–∏–º–æ–Ω–∞–¥ —Å –º–∞–ª–∏–Ω–æ–π, —á–µ—Ä–Ω–æ–π —Å–º–æ—Ä–æ–¥–∏–Ω–æ–π, —Ö–æ–ª–æ–¥–æ–∫)
    - Fresh Truck ULTRA(–õ–∏–º–æ–Ω–∞–¥ —Å –∫–ª—É–±–Ω–∏–∫–æ–π –∏ –º–∞–ª–∏–Ω–æ–π)
		`)
            bot.sendPhoto(chatId, './image/brusko.jpg')
            bot.sendPhoto(chatId, './image/mad.jpg')
            bot.sendPhoto(chatId, './image/redneck.jpg')
        }
        if (text === '–í—ã—Ö–æ–¥üôà'){
            return bot.sendMessage(chatId, 'Menu', menu)
        }
        return
    })
    bot.on('callback_query', msg => {
        const data = msg.data;
        const chatId = msg.message.chat.id;
        if(data === Object.keys(br)[0] || data === Object.keys(br)[1] || data === Object.keys(br)[2] || data === Object.keys(br)[3] || data === Object.keys(br)[4] || data === Object.keys(br)[5] || data === Object.keys(br)[6] || data === Object.keys(br)[7] || data === Object.keys(br)[8] || data === Object.keys(br)[9] || data === Object.keys(br)[10] || data === Object.keys(br)[11] || data === Object.keys(br)[12] || data === Object.keys(br)[13] || data === Object.keys(br)[14] || data === Object.keys(br)[15]) {

            dt = data;
            bot.sendMessage(chatId, '–°–∫–æ–ª—å–∫–æ –ø—Ä–æ–¥–∞–ª –∑–∞ —ç—Ç–æ—Ç —Ä–∞–∑?? ('+data+')üòã', sell);
        }
    })
}

start()